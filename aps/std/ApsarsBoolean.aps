package com.github.cao.awa.apsars.std;

@DoNotRefPrimary
public unique class ApsarsBoolean {
    public delegate: boolean;

    public inline isMoreThan(comparingTarget: short): boolean -> false;
    public inline isMoreThan(comparingTarget: int): boolean -> false;
    public inline isMoreThan(comparingTarget: long): boolean -> false;
    public inline isMoreThan(comparingTarget: float): boolean -> false;
    public inline isMoreThan(comparingTarget: double): boolean -> false;
    public inline isMoreThan(comparingTarget: byte): boolean -> false;
    public inline isMoreThan(comparingTarget: char): boolean -> false;
    public inline isMoreThan(comparingTarget: boolean): boolean -> false;

    public inline isLessThan(comparingTarget: short): boolean -> false;
    public inline isLessThan(comparingTarget: int): boolean -> false;
    public inline isLessThan(comparingTarget: long): boolean -> false;
    public inline isLessThan(comparingTarget: float): boolean -> false;
    public inline isLessThan(comparingTarget: double): boolean -> false;
    public inline isLessThan(comparingTarget: byte): boolean -> false;
    public inline isLessThan(comparingTarget: char): boolean -> false;
    public inline isLessThan(comparingTarget: boolean): boolean -> false;

    public inline isEquals(comparingTarget: short): boolean -> false;
    public inline isEquals(comparingTarget: int): boolean -> false;
    public inline isEquals(comparingTarget: long): boolean -> false;
    public inline isEquals(comparingTarget: float): boolean -> false;
    public inline isEquals(comparingTarget: double): boolean -> false;
    public inline isEquals(comparingTarget: byte): boolean -> false;
    public inline isEquals(comparingTarget: char): boolean -> false;
    public inline isEquals(comparingTarget: boolean): boolean -> comparingTarget && this.delegate;
}